<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>Willie</title>
        <link>https://www.wll.moe</link>
        <description>RSS for blog</description>
        <lastBuildDate>Sat, 23 Apr 2022 09:02:49 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>en</language>
        <copyright>Copyright 2022 - Willie</copyright>
        <item>
            <title><![CDATA[Test]]></title>
            <link>https://wll.moe/posts/_markdown</link>
            <guid>https://wll.moe/posts/_markdown</guid>
            <pubDate>Thu, 21 Apr 2022 16:00:00 GMT</pubDate>
            <description><![CDATA[test]]></description>
            <content:encoded><![CDATA[<p><span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>E</mi><mo>=</mo><mi>m</mi><msup><mi>c</mi><mn>2</mn></msup><mo>+</mo><mn>2</mn></mrow><annotation encoding="application/x-tex">
E = mc^2 + 2
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em"></span><span class="mord mathnormal" style="margin-right:0.05764em">E</span><span class="mspace" style="margin-right:0.2778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em"></span></span><span class="base"><span class="strut" style="height:0.8974em;vertical-align:-0.0833em"></span><span class="mord mathnormal">m</span><span class="mord"><span class="mord mathnormal">c</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em"><span style="top:-3.063em;margin-right:0.05em"><span class="pstrut" style="height:2.7em"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em"></span></span><span class="base"><span class="strut" style="height:0.6444em"></span><span class="mord">2</span></span></span></span></span></p><p><span class="math math-inline"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi><mo>=</mo><mn>13</mn></mrow><annotation encoding="application/x-tex">x = 13</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em"></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2778em"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em"></span></span><span class="base"><span class="strut" style="height:0.6444em"></span><span class="mord">13</span></span></span></span></span></p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[使用archlinux搭建路由器[转载]]]></title>
            <link>https://wll.moe/posts/archrouter</link>
            <guid>https://wll.moe/posts/archrouter</guid>
            <pubDate>Tue, 19 Apr 2022 16:00:00 GMT</pubDate>
            <description><![CDATA[Use Archlinux build router]]></description>
            <content:encoded><![CDATA[<h1 id="安装系统"><a aria-hidden="true" tabindex="-1" href="#安装系统"><span class="icon icon-link"></span></a>安装系统</h1><p>安装 Arch Linux。不过，先跳过「设置网络管理器」这一步</p><h1 id="设置网络管理器"><a aria-hidden="true" tabindex="-1" href="#设置网络管理器"><span class="icon icon-link"></span></a>设置网络管理器</h1><p>这次，我们使用 <strong>systemd-networkd</strong>。</p><p>设备是双网口的，将会一个口做 WAN 口接外网，另一个口做 LAN 口（接交换机，接电脑，接 AP，接支持桥接的路由器 WAN 口，或者接关了 DHCP 的不支持桥接的路由器 LAN 口都可以）我们需要配置两个网络设置，并且支持不能用 en 了)
我们先 <code>ip addr</code> 看一下现在连接着的接口，就把它当作 WAN 口好了</p><ul><li>首先是 WAN 口的配置：</li></ul><pre class="language-shell"><code class="language-shell"><span class="token function">sudo</span> <span class="token function">vim</span> /etc/systemd/network/20-ext-dhcp.network`
</code></pre><pre class="language-shell"><code class="language-shell"><span class="token punctuation">[</span>Match<span class="token punctuation">]</span>
<span class="token assign-left variable">Name</span><span class="token operator">=</span>enp4s0

<span class="token punctuation">[</span>Network<span class="token punctuation">]</span>
<span class="token assign-left variable">DHCP</span><span class="token operator">=</span>ipv4
<span class="token assign-left variable">IPv6AcceptRA</span><span class="token operator">=</span>yes <span class="token comment"># 接收 IPv6 的路由通告</span>

<span class="token punctuation">[</span>DHCPv4<span class="token punctuation">]</span>
<span class="token assign-left variable">UseHostname</span><span class="token operator">=</span>true
</code></pre><ul><li>然后来设置 LAN 口：</li></ul><pre class="language-shell"><code class="language-shell"><span class="token function">sudo</span> <span class="token function">vim</span> <span class="token number">21</span>-int.network
</code></pre><pre class="language-shell"><code class="language-shell"><span class="token punctuation">[</span>Match<span class="token punctuation">]</span>
<span class="token assign-left variable">Name</span><span class="token operator">=</span>enp3s0

<span class="token punctuation">[</span>Link<span class="token punctuation">]</span>
<span class="token assign-left variable">Multicast</span><span class="token operator">=</span>yes

<span class="token punctuation">[</span>Network<span class="token punctuation">]</span>
<span class="token assign-left variable">Address</span><span class="token operator">=</span><span class="token number">10.0</span>.0.1/16
<span class="token assign-left variable">MulticastDNS</span><span class="token operator">=</span>yes
<span class="token assign-left variable">IPMasquerade</span><span class="token operator">=</span>both
<span class="token assign-left variable">IPv6SendRA</span><span class="token operator">=</span>yes
<span class="token assign-left variable">DHCPv6PrefixDelegation</span><span class="token operator">=</span>yes

<span class="token punctuation">[</span>IPv6SendRA<span class="token punctuation">]</span>
<span class="token assign-left variable">Managed</span><span class="token operator">=</span>yes
<span class="token assign-left variable">OtherInformation</span><span class="token operator">=</span>yes
</code></pre><p><strong>10.0.0.1/16</strong> 是将来软路由 LAN 口的 IP 地址和子网（如果看不懂 xx.xx.xx.xx/xx 这样的表示方式，了解一下 IP-CIDR）</p><ul><li>开启 DNS 服务器</li></ul><p>我们暂且使用 <strong>systemd-resolved</strong> 的 DNS 服务器。开启的方法非常简单，只要创建一个文件</p><pre class="language-shell"><code class="language-shell"><span class="token function">sudo</span> <span class="token function">vim</span> /etc/systemd/resolved.conf.d/listen-on-internal.conf
</code></pre><pre class="language-shell"><code class="language-shell"><span class="token punctuation">[</span>Resolve<span class="token punctuation">]</span>
<span class="token assign-left variable">DNSStubListenerExtra</span><span class="token operator">=</span><span class="token number">10.0</span>.0.1
</code></pre><p>然后，得确定 <strong>systemd-networkd</strong> 的两个服务启用</p><pre class="language-shell"><code class="language-shell">systemctl <span class="token builtin class-name">enable</span> systemd-networkd
systemctl <span class="token builtin class-name">enable</span> systemd-resolved
</code></pre><ul><li>设置 DHCP 服务器</li></ul><p>我们要用的 <strong>dhcpd</strong> 服务位于 dhcp 这个包</p><p>（dhcpcd 时 DHCP 客户端，c 代表 client，d 代表 daemon，后台服务）</p><pre class="language-shell"><code class="language-shell"><span class="token function">sudo</span> pacman -S dhcp
</code></pre><ul><li>然后创建文件</li></ul><pre class="language-shell"><code class="language-shell"><span class="token function">sudo</span> <span class="token function">vim</span> /etc/dhcpd.conf
</code></pre><p>在这里可以配置分配 IP 的范围，以及固定 IP 分配</p><pre class="language-shell"><code class="language-shell">option domain-name-servers <span class="token number">10.0</span>.0.1<span class="token punctuation">;</span>
option subnet-mask <span class="token number">255.255</span>.0.0<span class="token punctuation">;</span>
option routers <span class="token number">10.0</span>.0.1<span class="token punctuation">;</span>
subnet <span class="token number">10.0</span>.0.0 netmask <span class="token number">255.255</span>.0.0 <span class="token punctuation">{</span>
    range <span class="token number">10.0</span>.1.4 <span class="token number">10.0</span>.1.250<span class="token punctuation">;</span>
    <span class="token function">host</span> clansty-mac <span class="token punctuation">{</span>
        hardware ethernet f8:e4:3b:77:c1:b7<span class="token punctuation">;</span>
        fixed-address <span class="token number">10.0</span>.0.2<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">host</span> ap <span class="token punctuation">{</span>
        hardware ethernet <span class="token number">28</span>:d1:27:99:5b:26<span class="token punctuation">;</span>
        fixed-address <span class="token number">10.0</span>.2.1<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><p>另外，dhcpd 默认会在所有的接口上运行，我们需要稍微修改一下服务文件，给它加个参数</p><pre class="language-shell"><code class="language-shell"><span class="token function">sudo</span> <span class="token function">cp</span> /usr/lib/systemd/system/dhcpd4.service /etc/systemd/system/dhcpd4@.service
<span class="token function">sudo</span> <span class="token function">vim</span> /etc/systemd/system/dhcpd4@.service
</code></pre><pre class="language-shell"><code class="language-shell">  <span class="token punctuation">..</span>.
  <span class="token punctuation">[</span>Service<span class="token punctuation">]</span>
  <span class="token assign-left variable">Type</span><span class="token operator">=</span>forking
- <span class="token assign-left variable">ExecStart</span><span class="token operator">=</span>/usr/bin/dhcpd -4 -q -cf /etc/dhcpd.conf -pf /run/dhcpd4/dhcpd.pid
+ <span class="token assign-left variable">ExecStart</span><span class="token operator">=</span>/usr/bin/dhcpd -4 -q -cf /etc/dhcpd.conf -pf /run/dhcpd4/dhcpd.pid %I
  <span class="token punctuation">..</span>.
</code></pre><p>然后我们启用服务就可以了</p><pre class="language-shell"><code class="language-shell">systemctl <span class="token builtin class-name">enable</span> dhcpd4@enp3s0.service
</code></pre><ul><li>开启内核网络转发</li></ul><pre class="language-shell"><code class="language-shell"><span class="token function">sudo</span> <span class="token function">vi</span> /etc/sysctl.d/30-ipforward.conf
net.ipv4.ip_forward<span class="token operator">=</span><span class="token number">1</span>
net.ipv6.ip_forward<span class="token operator">=</span><span class="token number">1</span>
</code></pre><p>现在，重启进入系统，然后把电脑接到软路由刚才定义的 LAN 口上，电脑应该就能获取到 IP 地址，并且能上网了</p><h1 id="安装-clash"><a aria-hidden="true" tabindex="-1" href="#安装-clash"><span class="icon icon-link"></span></a>安装 Clash</h1><p>首先是安装软件包。<strong>clash-premium-bin</strong> 包在 Clansty 源里</p><pre class="language-shell"><code class="language-shell"><span class="token function">sudo</span> pacman -S clash-premium-bin
</code></pre><p>然后将你的 clash 配置文件放置在 <code>/etc/clash</code> 中。由于包里的服务文件是用户级别的，我们现在创建一个系统级别服务</p><pre class="language-shell"><code class="language-shell"><span class="token function">sudo</span> <span class="token function">vim</span> /etc/systemd/system/clash.service
</code></pre><pre class="language-shell"><code class="language-shell"><span class="token punctuation">[</span>Unit<span class="token punctuation">]</span>
<span class="token assign-left variable">Description</span><span class="token operator">=</span>A rule based proxy <span class="token keyword">in</span> Go <span class="token keyword">for</span> neko.
<span class="token assign-left variable">After</span><span class="token operator">=</span>network.target

<span class="token punctuation">[</span>Service<span class="token punctuation">]</span>
<span class="token assign-left variable">Type</span><span class="token operator">=</span>exec
<span class="token assign-left variable">Restart</span><span class="token operator">=</span>on-abort
<span class="token assign-left variable">ExecStart</span><span class="token operator">=</span>/usr/bin/clash -d /etc/clash

<span class="token punctuation">[</span>Install<span class="token punctuation">]</span>
<span class="token assign-left variable">WantedBy</span><span class="token operator">=</span>multi-user.target
</code></pre><p>然后，我们可以禁用 <strong>systemd-resolved</strong> 了。我们接下来要用 clash 自带的 DNS 服务器，实现 DOT，DOH 或是 FakeIP</p><pre class="language-shell"><code class="language-shell"><span class="token function">sudo</span> systemctl disable --now systemd-resolved
<span class="token function">sudo</span> <span class="token function">rm</span> /etc/resolv.conf
<span class="token builtin class-name">echo</span> <span class="token string">'nameserver 127.0.0.1'</span> <span class="token operator">|</span> <span class="token function">sudo</span> <span class="token function">tee</span> /etc/resolv.conf
</code></pre><p>Clash 的配置文件中要有以下内容</p><pre class="language-shell"><code class="language-shell">
tun:
  enable: <span class="token boolean">true</span>
  stack: system
  dns-hijack:
   - tcp://8.8.8.8:53
   - udp://8.8.8.8:53

dns:
  enable: <span class="token boolean">true</span>
  enhanced-mode: 是什么呢
  fake-ip-range: <span class="token number">198.19</span>.0.1/16 <span class="token comment"># 将会是 tun 的子网</span>
  listen: <span class="token number">0.0</span>.0.0:53
  default-nameserver:
    <span class="token comment"># 用来找那些 DOH 域名的 IP 的 DNS 服务器</span>
    - <span class="token number">223.5</span>.5.5
    - <span class="token number">8.8</span>.8.8
  nameserver:
    <span class="token comment"># 默认用这些服务器来查询</span>
    - https://doh.pub/dns-query
    - https://dns.alidns.com/dns-query
  fallback:
    <span class="token comment"># 符合下一节的条件时，使用以下 DNS 服务器查询</span>
    - https://dns.google/dns-query
    - https://1.1.1.1/dns-query
  fallback-filter:
    geoip: <span class="token boolean">true</span>
    ipcidr:
      - <span class="token number">240.0</span>.0.0/4
      - <span class="token number">127.0</span>.0.1/8
      - <span class="token number">0.0</span>.0.0/32
    domain:
      - +.google.com
      - +.twitter.com
      - +.google.com.hk
      - +.googleapis.com
  ipv6: <span class="token boolean">true</span>
</code></pre><p>一种不太对的配置方法
这是我刚开始的时候用的方法。用完之后感觉，怎么这么快就好了，不过好像有哪里不对。</p><p>这是基于 FakeIP 的方法，让 clash 的 DNS 返回虚拟的 IP 地址。而虚拟 IP 恰好在 Clash Tun 的子网下，请求会自动路由到 clash 中。</p><pre class="language-shell"><code class="language-shell">dns:
  enable: <span class="token boolean">true</span>
  enhanced-mode: fake-ip
<span class="token function">sudo</span> systemctl <span class="token builtin class-name">enable</span> --now clash
</code></pre><p>这样之后，在电脑上打开一个浏览器，诶 网都能上了！</p><p>不过，后面转圈圈的 Telegram 还在转圈圈，需要指定代理为 <strong>10.0.0.1:7890</strong> 这样才能连上</p><p>出现这样的问题也就是因为 FakeIP 的原理，必须是经过 clash DNS 服务器进行解析的，通过域名的连接才会通过 clash</p><p>这么做其实应该说只是不推荐，不是不行。所以我写在这里</p><p>比较好（但是复杂）的配置方法
我们现在把 DNS 改为 <strong>redir-host</strong>，这时候 clash DNS 就会做一个普通 DNS 服务器的事，将安全的 DOT 或者 DOH 协议转换为 UDP53 的 DNS 协议</p><pre class="language-shell"><code class="language-shell">dns:
  enable: <span class="token boolean">true</span>
  enhanced-mode: fake-ip
</code></pre><p>这样之后，再启动 clash，我们的流量并没有经过 clash。</p><p>查看 <code>ip route</code> 发现，我们默认的流量路由还是 WAN 口的网卡。我们需要手动编辑路由表，把 LAN 口传入的到外网的流量传递给 tun 的网卡。</p><p>如果编辑主路由表的话，会导致 clash 自己连接服务器的流量也传递给自己，然后就造成循环了，这不好。所以我们编辑一张新的路由表，并且只用来处理 LAN 口流量</p><p>这里的 <strong>198.19.0.1</strong> 和 <strong>198.19.0.0/16</strong> 就对应配置文件中的 dns.fake-ip-range。如果没有设置 clash 的 DNS 服务器的话，默认将会是 198.18.0.1/16</p><pre class="language-shell"><code class="language-shell"><span class="token function">sudo</span> <span class="token function">ip</span> route <span class="token function">add</span> default via <span class="token number">198.19</span>.0.1 dev utun table <span class="token number">233</span>
<span class="token function">sudo</span> <span class="token function">ip</span> route <span class="token function">add</span> <span class="token number">198.19</span>.0.0/16 dev utun table <span class="token number">233</span>
<span class="token function">sudo</span> <span class="token function">ip</span> route <span class="token function">add</span> <span class="token number">10.0</span>.0.0/16 dev enp3s0 table <span class="token number">233</span>

<span class="token function">sudo</span> <span class="token function">ip</span> rule <span class="token function">add</span> from <span class="token number">10.0</span>.0.0/16 table <span class="token number">233</span>
</code></pre><p>这几行命令出了之后，后面的 Telegram 立即连上了，并且网页什么的也全都正常了。现在客户端获取到的 IP 也是真实的 IP（但这样会比 FakeIP 性能差一些）</p><p>然后，我们把这些写到脚本里面，并在 clash 启动之后就自动运行</p><pre class="language-shell"><code class="language-shell"><span class="token function">sudo</span> <span class="token function">mkdir</span> /etc/clash/scripts
<span class="token function">sudo</span> <span class="token function">vi</span> /etc/clash/scripts/setup.sh
</code></pre><pre class="language-shell"><code class="language-shell"><span class="token shebang important">#!/bin/bash</span>

<span class="token comment">#wait for TUN device</span>
<span class="token keyword">while</span> <span class="token operator">!</span> <span class="token function">ip</span> address show utun <span class="token operator">></span> /dev/null<span class="token punctuation">;</span> <span class="token keyword">do</span>
    <span class="token function">sleep</span> <span class="token number">0.2</span>
<span class="token keyword">done</span>
</code></pre><pre class="language-shell"><code class="language-shell"><span class="token function">ip</span> route flush table <span class="token number">233</span>
<span class="token function">ip</span> route <span class="token function">add</span> default via <span class="token number">198.19</span>.0.1 dev utun table <span class="token number">233</span>
<span class="token function">ip</span> route <span class="token function">add</span> <span class="token number">198.19</span>.0.0/16 dev utun table <span class="token number">233</span>
<span class="token function">ip</span> route <span class="token function">add</span> <span class="token number">10.0</span>.0.0/16 dev enp3s0 table <span class="token number">233</span>

<span class="token function">ip</span> rule <span class="token function">add</span> from <span class="token number">10.0</span>.0.0/16 table <span class="token number">233</span>
</code></pre><p>再写一个在 clash 退出的时候还原配置的脚本</p><pre class="language-shell"><code class="language-shell"><span class="token function">sudo</span> <span class="token function">vi</span> /etc/clash/scripts/unsetup.sh
</code></pre><pre class="language-shell"><code class="language-shell"><span class="token shebang important">#!/bin/bash</span>

<span class="token function">ip</span> rule delete from all table <span class="token number">233</span>
<span class="token function">ip</span> route flush table <span class="token number">233</span>
</code></pre><p>稍微改一下 clash 的 <strong>systemd</strong> 服务，就是我们刚才创建的那个</p><pre class="language-shell"><code class="language-shell">  <span class="token punctuation">[</span>Service<span class="token punctuation">]</span>
  <span class="token assign-left variable">Type</span><span class="token operator">=</span>exec
  <span class="token assign-left variable">Restart</span><span class="token operator">=</span>on-abort
  <span class="token assign-left variable">ExecStart</span><span class="token operator">=</span>/usr/bin/clash -d /etc/clash
+ <span class="token assign-left variable">ExecStartPost</span><span class="token operator">=</span>+/etc/clash/scripts/setup.sh
+ <span class="token assign-left variable">ExecStopPost</span><span class="token operator">=</span>+/etc/clash/scripts/unsetup.sh
</code></pre><p>这样之后，就算再重启，我们的服务也能正常了</p><hr/><p>转载自<a href="https://nyac.at/posts/archlinux-router">此文</a></p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[浅谈搭建现代化静态博客]]></title>
            <link>https://wll.moe/posts/staticblog</link>
            <guid>https://wll.moe/posts/staticblog</guid>
            <pubDate>Mon, 18 Apr 2022 16:00:00 GMT</pubDate>
            <description><![CDATA[talking how to make a static blog...]]></description>
            <content:encoded><![CDATA[<h1 id="回顾过去搭建"><a aria-hidden="true" tabindex="-1" href="#回顾过去搭建"><span class="icon icon-link"></span></a>回顾过去搭建</h1><p>第一次搭建是在 2020 年的假期，利用电脑搭建了基于<strong>Gridea</strong>构建的博客。用着一款很简约的主题<a href="https://github.com/ITJoker233/Gridea-theme-Chic">Chic</a>，成功的搭建了第一个自己的站点。但它有个很大的缺点：只能用本地的客户端，不支持手机，也不容易云端操作。所以说它并不满足我的需求。</p><p>之后我发现了一个很好用的程序，叫做<strong>Pandoc</strong>。</p><blockquote><p>Pandoc is a free and open-source document converter, widely used as a writing tool (especially by scholars)[2] and as a basis for publishing workflows.[3] It was created by John MacFarlane, a philosophy professor at the University of California, Berkeley. — From WikiPedia.</p></blockquote><p>它可以转换包括 <code>PDF</code>, <code>MD</code>, <code>HTML</code>, 甚至是<code>Word</code>等十几种格式，还拥有强大的自定义功能。它微不足道的小功能就满足我的博客需求了。我参考了<a href="https://ayaka.shn.hk/">三日月綾香</a>的博客，写出了完全由自己设计的网页，发布了两款主题：<a href="https://github.com/xuwillie/theme-clean">Clean</a>和<a href="https://github.com/xuwillie/theme-console">Console</a>。</p><img src="https://wll.moe/Screenshot_20220419_182819.jpg" width="1080" height="1800"/><p>除了这几个偏门的方案，还有一些很流行的静态博客框架，比如 <strong>Hexo</strong>, <strong>Hugo</strong>, <strong>Jekyll</strong> 等。然而已经有了这么多好的选择，我却没有用这些!</p><p><strong>今年 2 二月份</strong>，我看到了日本的一位前端工程师 <strong>Takuya Matsuyama</strong> 用 NextJS 制作的的<a href="https://craftz.dog">个人网站</a>，了解了其搭建过程，这使我走向了使用 React 元框架的道路。</p><p>相比普通的博客网站，用 React 元框架和 NextJS 制作的网站更加先进，现代：</p><ol><li>切换页面时网站只会加载新的未加载的内容，重复利用现有资源，减少了不必要的加载时间，提升了网站性能。</li><li>网站重载不需要刷新，通过比如 <strong>Framer-motion</strong> 实现动画效果，有着 Native 级的浏览体验</li><li><strong>React</strong>元框架有着丰富的生态链，可以快速实现比如动画，暗黑模式效果。NextJS 也使得支持更多获取数据的方式，比如 <strong>CMS</strong>(See <a href="https://github.com/vercel/next.js/tree/canary/examples/cms-builder-io">NextJS Example</a>)，可以实现获取云端内容渲染成文章，即使是没有后端的静态博客！</li></ol><p>现在来说说如何用 Nextjs 来制作博客吧！</p><h1 id="搭建过程"><a aria-hidden="true" tabindex="-1" href="#搭建过程"><span class="icon icon-link"></span></a>搭建过程</h1><blockquote><p>搭建过程比较复杂，请看完我的所有步骤！</p></blockquote><h2 id="准备工作终端环境中进行"><a aria-hidden="true" tabindex="-1" href="#准备工作终端环境中进行"><span class="icon icon-link"></span></a>准备工作(终端环境中进行)</h2><p>首先你需要安装 <strong>NodeJS</strong> 环境，Windows 用户可以用 <strong>chocolatey</strong> 通过命令安装，<code>choco install nodejs yarn</code>。</p><h3 id="选择一个目录并初始化项目"><a aria-hidden="true" tabindex="-1" href="#选择一个目录并初始化项目"><span class="icon icon-link"></span></a>选择一个目录并初始化项目</h3><pre class="language-shell"><code class="language-shell"><span class="token function">yarn</span> init -y
<span class="token function">mkdir</span> pages
<span class="token function">mkdir</span> components
<span class="token function">mkdir</span> lib
<span class="token function">mkdir</span> styles
<span class="token function">mkdir</span> _posts
<span class="token function">touch</span> next.config.js
<span class="token function">touch</span> .eslintrc.json
<span class="token function">touch</span> .prettierignore
<span class="token function">touch</span> prettier.config.js
<span class="token function">yarn</span> <span class="token function">add</span> @mdx-js/loader gray-matter next-mdx-remote next-compose-plugins rehype remark remark-html react react-dom next eslint eslint-config-next prettier
</code></pre><blockquote><p><strong>ESlint</strong>是用来语法检查的工具。 <strong>prettier</strong> 用来整理代码。</p></blockquote><h3 id="编写文件"><a aria-hidden="true" tabindex="-1" href="#编写文件"><span class="icon icon-link"></span></a>编写文件</h3><ul><li>编写 <strong>package.json</strong>:</li></ul><pre class="language-json"><code class="language-json"><span class="token punctuation">{</span>
  <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"Willie-homepage"</span><span class="token punctuation">,</span>
  <span class="token property">"version"</span><span class="token operator">:</span> <span class="token string">"1.1.0"</span><span class="token punctuation">,</span>
  <span class="token property">"description"</span><span class="token operator">:</span> <span class="token string">"Willie's website"</span><span class="token punctuation">,</span>
  <span class="token property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">"dev"</span><span class="token operator">:</span> <span class="token string">"next dev"</span><span class="token punctuation">,</span>
    <span class="token property">"build"</span><span class="token operator">:</span> <span class="token string">"next build"</span><span class="token punctuation">,</span>
    <span class="token property">"start"</span><span class="token operator">:</span> <span class="token string">"next start"</span><span class="token punctuation">,</span>
    <span class="token property">"prettier"</span><span class="token operator">:</span> <span class="token string">"prettier --write ."</span><span class="token punctuation">,</span>
    <span class="token property">"lint"</span><span class="token operator">:</span> <span class="token string">"next lint"</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token property">"keywords"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token property">"author"</span><span class="token operator">:</span> <span class="token string">"Willie"</span><span class="token punctuation">,</span>
  <span class="token property">"license"</span><span class="token operator">:</span> <span class="token string">"MIT"</span><span class="token punctuation">,</span>
  <span class="token property">"dependencies"</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">"@mdx-js/loader"</span><span class="token operator">:</span> <span class="token string">"latest"</span><span class="token punctuation">,</span>
    <span class="token property">"date-fns"</span><span class="token operator">:</span> <span class="token string">"latest"</span><span class="token punctuation">,</span>
    <span class="token property">"gray-matter"</span><span class="token operator">:</span> <span class="token string">"latest"</span><span class="token punctuation">,</span>
    <span class="token property">"next"</span><span class="token operator">:</span> <span class="token string">"latest"</span><span class="token punctuation">,</span>
    <span class="token property">"next-compose-plugins"</span><span class="token operator">:</span> <span class="token string">"latest"</span><span class="token punctuation">,</span>
    <span class="token property">"next-mdx-remote"</span><span class="token operator">:</span> <span class="token string">"latest"</span><span class="token punctuation">,</span>
    <span class="token property">"react"</span><span class="token operator">:</span> <span class="token string">"latest"</span><span class="token punctuation">,</span>
    <span class="token property">"react-dom"</span><span class="token operator">:</span> <span class="token string">"latest"</span><span class="token punctuation">,</span>
    <span class="token property">"rehype"</span><span class="token operator">:</span> <span class="token string">"latest"</span><span class="token punctuation">,</span>
    <span class="token property">"remark"</span><span class="token operator">:</span> <span class="token string">"latest"</span><span class="token punctuation">,</span>
    <span class="token property">"remark-html"</span><span class="token operator">:</span> <span class="token string">"latest"</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token property">"devDependencies"</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">"eslint"</span><span class="token operator">:</span> <span class="token string">"latest"</span><span class="token punctuation">,</span>
    <span class="token property">"eslint-config-next"</span><span class="token operator">:</span> <span class="token string">"latest"</span><span class="token punctuation">,</span>
    <span class="token property">"prettier"</span><span class="token operator">:</span> <span class="token string">"latest"</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><blockquote><p>请将 <strong>name</strong>，<strong>author</strong> 等个人信息自行修改</p></blockquote><ul><li>编写 <strong>next.config.js</strong></li></ul><pre class="language-javascript"><code class="language-javascript">module<span class="token punctuation">.</span><span class="token property-access">exports</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  reactStrictMode<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  swcMinify<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><ul><li>编写 <strong>.eslintrc.json</strong></li></ul><pre class="language-json"><code class="language-json"><span class="token punctuation">{</span>
  <span class="token property">"root"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token property">"extends"</span><span class="token operator">:</span> <span class="token string">"next"</span><span class="token punctuation">,</span>
  <span class="token property">"rules"</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">"no-unused-vars"</span><span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token string">"error"</span><span class="token punctuation">,</span>
      <span class="token punctuation">{</span>
        <span class="token property">"argsIgnorePattern"</span><span class="token operator">:</span> <span class="token string">"^_"</span><span class="token punctuation">,</span>
        <span class="token property">"varsIgnorePattern"</span><span class="token operator">:</span> <span class="token string">"^_"</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token property">"react/display-name"</span><span class="token operator">:</span> <span class="token number">0</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><ul><li>编写 <strong>.prettierignore</strong></li></ul><pre class="language-json"><code class="language-json">node_modules
.next
</code></pre><ul><li>编写 <strong>prettier.config.js</strong></li></ul><pre class="language-javascript"><code class="language-javascript"><span class="token keyword">const</span> options <span class="token operator">=</span> <span class="token punctuation">{</span>
  arrowParens<span class="token operator">:</span> <span class="token string">"avoid"</span><span class="token punctuation">,</span>
  singleQuote<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  bracketSpacing<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  endOfLine<span class="token operator">:</span> <span class="token string">"if"</span><span class="token punctuation">,</span>
  semi<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
  tabwidth<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>
  trailingComma<span class="token operator">:</span> <span class="token string">"none"</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><ul><li>创建自定义样式</li></ul><p>在 <code>styles/global.css</code> 里将你所需要样式填写进去</p><ul><li>创建获取文章内容的 JS</li></ul><p>在 <code>lib/mdx.js</code> 里写入以下内容</p><pre class="language-javascript"><code class="language-javascript"><span class="token keyword module">import</span> <span class="token imports">fs</span> <span class="token keyword module">from</span> <span class="token string">"fs"</span><span class="token punctuation">;</span>
<span class="token keyword module">import</span> <span class="token imports">matter</span> <span class="token keyword module">from</span> <span class="token string">"gray-matter"</span><span class="token punctuation">;</span>
<span class="token keyword module">import</span> <span class="token imports"><span class="token punctuation">{</span> serialize <span class="token punctuation">}</span></span> <span class="token keyword module">from</span> <span class="token string">"next-mdx-remote/serialize"</span><span class="token punctuation">;</span>
<span class="token keyword module">import</span> <span class="token imports">path</span> <span class="token keyword module">from</span> <span class="token string">"path"</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> root <span class="token operator">=</span> process<span class="token punctuation">.</span><span class="token method function property-access">cwd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword module">export</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">getFiles</span><span class="token punctuation">(</span><span class="token parameter">type</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword control-flow">return</span> fs<span class="token punctuation">.</span><span class="token method function property-access">readdirSync</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token method function property-access">join</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> <span class="token string">"_posts"</span><span class="token punctuation">,</span> type<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword module">export</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">getFileBySlug</span><span class="token punctuation">(</span><span class="token parameter">type<span class="token punctuation">,</span> slug</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> source <span class="token operator">=</span> slug
    <span class="token operator">?</span> fs<span class="token punctuation">.</span><span class="token method function property-access">readFileSync</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token method function property-access">join</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> <span class="token string">"_posts"</span><span class="token punctuation">,</span> type<span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>slug<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">.mdx</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"utf-8"</span><span class="token punctuation">)</span>
    <span class="token operator">:</span> fs<span class="token punctuation">.</span><span class="token method function property-access">readFileSync</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token method function property-access">join</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> <span class="token string">"_posts"</span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>type<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">.mdx</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">const</span> <span class="token punctuation">{</span> data<span class="token operator">:</span> metaData<span class="token punctuation">,</span> content <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">matter</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> contentSerialized <span class="token operator">=</span> <span class="token keyword control-flow">await</span> <span class="token function">serialize</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword control-flow">return</span> <span class="token punctuation">{</span>
    content<span class="token punctuation">,</span>
    contentSerialized<span class="token punctuation">,</span>
    slug<span class="token operator">:</span> slug <span class="token operator">?</span> slug <span class="token operator">:</span> <span class="token keyword null nil">null</span><span class="token punctuation">,</span>
    metaData<span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword module">export</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">getAllFilesFrontMatter</span><span class="token punctuation">(</span><span class="token parameter">type</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> files <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token method function property-access">readdirSync</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token method function property-access">join</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> <span class="token string">"_posts"</span><span class="token punctuation">,</span> type<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword control-flow">return</span> files<span class="token punctuation">.</span><span class="token method function property-access">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">allPosts<span class="token punctuation">,</span> postSlug</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> source <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token method function property-access">readFileSync</span><span class="token punctuation">(</span>
      path<span class="token punctuation">.</span><span class="token method function property-access">join</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> <span class="token string">"_posts"</span><span class="token punctuation">,</span> type<span class="token punctuation">,</span> postSlug<span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token string">"utf-8"</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> <span class="token punctuation">{</span> data <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">matter</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword control-flow">return</span> <span class="token punctuation">[</span>
      <span class="token punctuation">{</span>
        <span class="token spread operator">...</span>data<span class="token punctuation">,</span>
        slug<span class="token operator">:</span> postSlug<span class="token punctuation">.</span><span class="token method function property-access">replace</span><span class="token punctuation">(</span><span class="token string">".mdx"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token spread operator">...</span>allPosts<span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><blockquote><p>这段代码获取了文件名作为路径，用 <strong>front-matter</strong> 获取了 <strong>Markdown</strong> 文件的内容和媒体，感兴趣的可以在 <a href="https://nextjs.org">NextJS</a> 文档中找到相关介绍！</p></blockquote><ul><li>编写 <code>pages/_app.js</code></li></ul><pre class="language-javascript"><code class="language-javascript"><span class="token keyword module">import</span> <span class="token string">"../styles/global.css"</span><span class="token punctuation">;</span>

<span class="token keyword module">export</span> <span class="token keyword module">default</span> <span class="token keyword">function</span> <span class="token function"><span class="token maybe-class-name">App</span></span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> <span class="token maybe-class-name">Component</span><span class="token punctuation">,</span> pageProps <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword control-flow">return</span> <span class="token operator"><</span><span class="token maybe-class-name">Component</span> <span class="token punctuation">{</span><span class="token spread operator">...</span>pageProps<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><ul><li>编写 <code>components/BlogPost/index.js</code></li></ul><pre class="language-javascript"><code class="language-javascript"><span class="token keyword module">import</span> <span class="token imports"><span class="token maybe-class-name">NextLink</span></span> <span class="token keyword module">from</span> <span class="token string">"next/link"</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token function-variable function"><span class="token maybe-class-name">BlogPost</span></span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> title<span class="token punctuation">,</span> date<span class="token punctuation">,</span> excerpt<span class="token punctuation">,</span> slug <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>
  <span class="token keyword control-flow">return</span> <span class="token punctuation">(</span>
    <span class="token operator"><</span><span class="token maybe-class-name">NextLink</span> href<span class="token operator">=</span><span class="token punctuation">{</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>slug<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">}</span> passHref<span class="token operator">></span>
      <span class="token operator"><</span>li<span class="token operator">></span>
        <span class="token operator"><</span>div className<span class="token operator">=</span><span class="token string">"postdate"</span><span class="token operator">></span>
          <span class="token operator"><</span>span<span class="token operator">></span><span class="token punctuation">{</span>date<span class="token punctuation">}</span><span class="token operator"><</span><span class="token operator">/</span>span<span class="token operator">></span>
        <span class="token operator"><</span><span class="token operator">/</span>div<span class="token operator">></span>
        <span class="token operator"><</span>h2<span class="token operator">></span><span class="token punctuation">{</span>title<span class="token punctuation">}</span><span class="token operator"><</span><span class="token operator">/</span>h2<span class="token operator">></span>
        <span class="token operator"><</span>p className<span class="token operator">=</span><span class="token string">"excerpt"</span><span class="token operator">></span><span class="token punctuation">{</span>excerpt<span class="token punctuation">}</span><span class="token operator"><</span><span class="token operator">/</span>p<span class="token operator">></span>
      <span class="token operator"><</span><span class="token operator">/</span>li<span class="token operator">></span>
    <span class="token operator"><</span><span class="token operator">/</span><span class="token maybe-class-name">NextLink</span><span class="token operator">></span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword module">export</span> <span class="token keyword module">default</span> <span class="token maybe-class-name">BlogPost</span><span class="token punctuation">;</span>
</code></pre><blockquote><p>该代码生成文章列表，根据自己需求编写。</p></blockquote><ul><li>导航栏 Nav 的例子，编写 <code>components/Nav/index.js</code></li></ul><pre class="language-javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function"><span class="token maybe-class-name">Nav</span></span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>
  <span class="token keyword control-flow">return</span> <span class="token punctuation">(</span>
    <span class="token operator"><</span>nav<span class="token operator">></span>
      <span class="token operator"><</span>h1 className<span class="token operator">=</span><span class="token string">"title"</span><span class="token operator">></span><span class="token constant">WLL</span><span class="token operator">&</span>lsquo<span class="token punctuation">;</span>s blog<span class="token operator"><</span><span class="token operator">/</span>h1<span class="token operator">></span>
      <span class="token operator"><</span>div<span class="token operator">></span>
        <span class="token operator"><</span>p id<span class="token operator">=</span><span class="token string">"icon"</span><span class="token operator">></span>☽<span class="token operator"><</span><span class="token operator">/</span>p<span class="token operator">></span>
      <span class="token operator"><</span><span class="token operator">/</span>div<span class="token operator">></span>
    <span class="token operator"><</span><span class="token operator">/</span>nav<span class="token operator">></span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword module">export</span> <span class="token keyword module">default</span> <span class="token maybe-class-name">Nav</span><span class="token punctuation">;</span>
</code></pre><ul><li>编写 <code>pages/index.js</code></li></ul><pre class="language-javascript"><code class="language-javascript"><span class="token keyword module">import</span> <span class="token imports"><span class="token maybe-class-name">BlogPost</span></span> <span class="token keyword module">from</span> <span class="token string">"../components/BlogPost"</span><span class="token punctuation">;</span>
<span class="token keyword module">import</span> <span class="token imports"><span class="token punctuation">{</span> getAllFilesFrontMatter <span class="token punctuation">}</span></span> <span class="token keyword module">from</span> <span class="token string">"../lib/mdx"</span><span class="token punctuation">;</span>
<span class="token keyword module">import</span> <span class="token imports"><span class="token maybe-class-name">Head</span></span> <span class="token keyword module">from</span> <span class="token string">"next/head"</span><span class="token punctuation">;</span>
<span class="token keyword module">import</span> <span class="token imports"><span class="token maybe-class-name">Footer</span></span> <span class="token keyword module">from</span> <span class="token string">"../components/Footer"</span><span class="token punctuation">;</span>
<span class="token keyword module">import</span> <span class="token imports"><span class="token maybe-class-name">Nav</span></span> <span class="token keyword module">from</span> <span class="token string">"../components/Nav"</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token function-variable function"><span class="token maybe-class-name">Blog</span></span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> posts <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> filteredBlogPosts <span class="token operator">=</span> posts<span class="token punctuation">.</span><span class="token method function property-access">sort</span><span class="token punctuation">(</span>
    <span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token known-class-name class-name">Number</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span><span class="token property-access">date</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token known-class-name class-name">Number</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token property-access">date</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword control-flow">return</span> <span class="token punctuation">(</span>
    <span class="token operator"><</span><span class="token operator">></span>
      <span class="token operator"><</span><span class="token maybe-class-name">Head</span><span class="token operator">></span>
        <span class="token operator"><</span>title<span class="token operator">></span><span class="token constant">WLL</span><span class="token operator">&</span>lsquo<span class="token punctuation">;</span>s blog<span class="token operator"><</span><span class="token operator">/</span>title<span class="token operator">></span>
        <span class="token operator"><</span>meta name<span class="token operator">=</span><span class="token string">"description"</span> content<span class="token operator">=</span><span class="token string">"WLL‘s blog"</span> <span class="token operator">/</span><span class="token operator">></span>
      <span class="token operator"><</span><span class="token operator">/</span><span class="token maybe-class-name">Head</span><span class="token operator">></span>
      <span class="token operator"><</span><span class="token maybe-class-name">Nav</span> <span class="token operator">/</span><span class="token operator">></span>
      <span class="token operator"><</span>div className<span class="token operator">=</span><span class="token string">"post-list"</span><span class="token operator">></span>
        <span class="token operator"><</span>h2<span class="token operator">></span>※ <span class="token maybe-class-name">My</span> <span class="token maybe-class-name">Articles</span><span class="token operator"><</span><span class="token operator">/</span>h2<span class="token operator">></span>
        <span class="token operator"><</span>ul<span class="token operator">></span>
          <span class="token punctuation">{</span>filteredBlogPosts<span class="token punctuation">.</span><span class="token method function property-access">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">post</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">(</span>
            <span class="token operator"><</span><span class="token maybe-class-name">BlogPost</span> key<span class="token operator">=</span><span class="token punctuation">{</span>post<span class="token punctuation">.</span><span class="token property-access">title</span><span class="token punctuation">}</span> <span class="token punctuation">{</span><span class="token spread operator">...</span>post<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span>
          <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span>
        <span class="token operator"><</span><span class="token operator">/</span>ul<span class="token operator">></span>
      <span class="token operator"><</span><span class="token operator">/</span>div<span class="token operator">></span>
      <span class="token operator"><</span><span class="token maybe-class-name">Footer</span> <span class="token operator">/</span><span class="token operator">></span>
    <span class="token operator"><</span><span class="token operator">/</span><span class="token operator">></span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword module">export</span> <span class="token keyword module">default</span> <span class="token maybe-class-name">Blog</span><span class="token punctuation">;</span>

<span class="token keyword module">export</span> <span class="token keyword">const</span> <span class="token function-variable function">getStaticProps</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> posts <span class="token operator">=</span> <span class="token keyword control-flow">await</span> <span class="token function">getAllFilesFrontMatter</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword control-flow">return</span> <span class="token punctuation">{</span>
    props<span class="token operator">:</span> <span class="token punctuation">{</span>
      posts<span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><blockquote><p>代码中的 Footer 可以参考 Nav 的编写。</p></blockquote><ul><li>编写 <code>pages/[slug].js</code></li></ul><pre class="language-javascript"><code class="language-javascript"><span class="token keyword module">import</span> <span class="token imports"><span class="token punctuation">{</span> <span class="token maybe-class-name">MDXRemote</span> <span class="token punctuation">}</span></span> <span class="token keyword module">from</span> <span class="token string">"next-mdx-remote"</span><span class="token punctuation">;</span>
<span class="token keyword module">import</span> <span class="token imports"><span class="token maybe-class-name">Head</span></span> <span class="token keyword module">from</span> <span class="token string">"next/head"</span><span class="token punctuation">;</span>
<span class="token keyword module">import</span> <span class="token imports"><span class="token maybe-class-name">Footer</span></span> <span class="token keyword module">from</span> <span class="token string">"../components/Footer"</span><span class="token punctuation">;</span>
<span class="token keyword module">import</span> <span class="token imports"><span class="token maybe-class-name">Nav</span></span> <span class="token keyword module">from</span> <span class="token string">"../components/Nav"</span><span class="token punctuation">;</span>
<span class="token keyword module">import</span> <span class="token imports"><span class="token punctuation">{</span> getFileBySlug<span class="token punctuation">,</span> getFiles <span class="token punctuation">}</span></span> <span class="token keyword module">from</span> <span class="token string">"../lib/mdx"</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token function-variable function"><span class="token maybe-class-name">BlogPost</span></span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> post <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span> metaData<span class="token punctuation">,</span> contentSerialized <span class="token punctuation">}</span> <span class="token operator">=</span> post<span class="token punctuation">;</span>
  <span class="token keyword control-flow">return</span> <span class="token punctuation">(</span>
    <span class="token operator"><</span>div<span class="token operator">></span>
      <span class="token operator"><</span><span class="token maybe-class-name">Head</span><span class="token operator">></span>
        <span class="token operator"><</span>title<span class="token operator">></span><span class="token punctuation">{</span>metaData<span class="token punctuation">.</span><span class="token property-access">title</span><span class="token punctuation">}</span><span class="token operator"><</span><span class="token operator">/</span>title<span class="token operator">></span>
        <span class="token operator"><</span>meta name<span class="token operator">=</span><span class="token string">"description"</span> content<span class="token operator">=</span><span class="token string">"{metaData.title}"</span> <span class="token operator">/</span><span class="token operator">></span>
      <span class="token operator"><</span><span class="token operator">/</span><span class="token maybe-class-name">Head</span><span class="token operator">></span>
      <span class="token operator"><</span><span class="token maybe-class-name">Nav</span> <span class="token operator">/</span><span class="token operator">></span>
      <span class="token operator"><</span>header<span class="token operator">></span>
        <span class="token operator"><</span>div className<span class="token operator">=</span><span class="token string">"card"</span><span class="token operator">></span>
          <span class="token operator"><</span>h1<span class="token operator">></span><span class="token punctuation">{</span>metaData<span class="token punctuation">.</span><span class="token property-access">title</span><span class="token punctuation">}</span><span class="token operator"><</span><span class="token operator">/</span>h1<span class="token operator">></span>
          <span class="token operator"><</span>h3 className<span class="token operator">=</span><span class="token string">"date"</span><span class="token operator">></span> ∇ <span class="token punctuation">{</span>metaData<span class="token punctuation">.</span><span class="token property-access">date</span><span class="token punctuation">}</span> <span class="token operator"><</span><span class="token operator">/</span>h3<span class="token operator">></span>
          <span class="token operator"><</span>p className<span class="token operator">=</span><span class="token string">"author"</span><span class="token operator">></span> ¶ <span class="token maybe-class-name">Willie</span><span class="token operator"><</span><span class="token operator">/</span>p<span class="token operator">></span>
          <span class="token operator"><</span>div<span class="token operator">></span>
            <span class="token operator"><</span>p className<span class="token operator">=</span><span class="token string">"postexcerpt"</span><span class="token operator">></span><span class="token punctuation">{</span>metaData<span class="token punctuation">.</span><span class="token property-access">excerpt</span><span class="token punctuation">}</span><span class="token operator"><</span><span class="token operator">/</span>p<span class="token operator">></span>
          <span class="token operator"><</span><span class="token operator">/</span>div<span class="token operator">></span>
        <span class="token operator"><</span><span class="token operator">/</span>div<span class="token operator">></span>
      <span class="token operator"><</span><span class="token operator">/</span>header<span class="token operator">></span>
      <span class="token operator"><</span>div className<span class="token operator">=</span><span class="token string">"post"</span><span class="token operator">></span>
        <span class="token operator"><</span><span class="token maybe-class-name">MDXRemote</span> compiledSource<span class="token operator">=</span><span class="token punctuation">{</span>contentSerialized<span class="token punctuation">.</span><span class="token property-access">compiledSource</span><span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span>
      <span class="token operator"><</span><span class="token operator">/</span>div<span class="token operator">></span>
      <span class="token operator"><</span><span class="token maybe-class-name">Footer</span> <span class="token operator">/</span><span class="token operator">></span>
    <span class="token operator"><</span><span class="token operator">/</span>div<span class="token operator">></span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword module">export</span> <span class="token keyword module">default</span> <span class="token maybe-class-name">BlogPost</span><span class="token punctuation">;</span>

<span class="token keyword module">export</span> <span class="token keyword">const</span> <span class="token function-variable function">getStaticPaths</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> posts <span class="token operator">=</span> <span class="token keyword control-flow">await</span> <span class="token function">getFiles</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword control-flow">return</span> <span class="token punctuation">{</span>
    paths<span class="token operator">:</span> posts<span class="token punctuation">.</span><span class="token method function property-access">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">p</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">{</span>
      params<span class="token operator">:</span> <span class="token punctuation">{</span>
        slug<span class="token operator">:</span> p<span class="token punctuation">.</span><span class="token method function property-access">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.mdx</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    fallback<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword module">export</span> <span class="token keyword">const</span> <span class="token function-variable function">getStaticProps</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> params <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> slug <span class="token operator">=</span> params<span class="token operator">?.</span>slug<span class="token punctuation">;</span>
  <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>slug<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword control-flow">try</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> post <span class="token operator">=</span> <span class="token keyword control-flow">await</span> <span class="token function">getFileBySlug</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">,</span> slug<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword control-flow">return</span> <span class="token punctuation">{</span>
        props<span class="token operator">:</span> <span class="token punctuation">{</span>
          post<span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword control-flow">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">error</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token keyword control-flow">return</span> <span class="token punctuation">{</span>
    notFound<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><blockquote><p>这里是文章的界面！感谢看到这一步，至此已经大功告成了！</p></blockquote><h2 id="尝试编写文章"><a aria-hidden="true" tabindex="-1" href="#尝试编写文章"><span class="icon icon-link"></span></a>尝试编写文章</h2><blockquote><p>整理一下之前写的代码</p></blockquote><pre class="language-shell"><code class="language-shell"><span class="token function">yarn</span> run prettier
</code></pre><blockquote><p>在 <code>_posts</code> 中编写以 <strong>.mdx</strong> 后缀的 Markdown 文件</p></blockquote><ul><li>例子</li></ul><pre class="language-md"><code class="language-md"><span class="token front-matter-block"><span class="token punctuation">---</span>
<span class="token font-matter yaml language-yaml">title: "Something About Me"
date: "2021-07-18"
excerpt: "About..."</span>
<span class="token punctuation">---</span></span>

<span class="token title important"><span class="token punctuation">#</span> 关于我</span>

还有很多要改善的地方！

<span class="token title important"><span class="token punctuation">#</span> 站点</span>

<span class="token blockquote punctuation">></span> 除非另有说明，本博客所有文章均采用<span class="token code keyword">`CC BY-NC-SA 4.0 许可协议`</span>。 转载请在文中明显位置注明出处
</code></pre><p>现在用 <code>yarn run dev</code> 预览吧！</p><hr/><p>写这篇文章花费了很长时间，也希望网站搭建爱好者们可以参考本文，制作一个完全自己 DIY 的博客。可以参考这个<a href="https://old-blog-three.vercel.app/">博客</a>!</p><p>—-未完待续</p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Gitment Fix Record]]></title>
            <link>https://wll.moe/posts/gitment</link>
            <guid>https://wll.moe/posts/gitment</guid>
            <pubDate>Tue, 24 Aug 2021 16:00:00 GMT</pubDate>
            <description><![CDATA[A record about fixing gitment]]></description>
            <content:encoded><![CDATA[<blockquote><p>I couldn’t run it correctly. According to search, I found the reason and the fix method. So how can we fix it?</p></blockquote><p>Due to unknown case, the maintainer don’t update it with a long time. So the server get some problems.</p><h1 id="start"><a aria-hidden="true" tabindex="-1" href="#start"><span class="icon icon-link"></span></a>Start</h1><p>We can archieve it on Heroku clound!</p><ul><li><p>Log in <a href="https://www.heroku.com">Heroku</a></p></li><li><p>Fork the <a href="https://github.com/imsun/gh-oauth-server">server sources</a></p></li><li><p>Edit the package.json. Add “heroku": "NODE_ENV=production node server” in “scripts”</p></li><li><p>Create Procfile, add web: npm run heroku, then create <strong>app.json</strong>, add “name": "gh-oauth-server”</p></li><li><p>Open <a href="https://heroku.com/deploy?template=URL">heroku</a>, where URL is changed to a fork address e.g. github.com/USERNAME/gh-oauth-server</p></li><li><p>Create the software. Change the original gh-oauth.imsun.net to “YourAppName”.herokuapp.com</p></li></ul><p>Enjoy~</p>]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[How Mi Cc9e Flash into Custom Android]]></title>
            <link>https://wll.moe/posts/xiaomicc9</link>
            <guid>https://wll.moe/posts/xiaomicc9</guid>
            <pubDate>Thu, 24 Jun 2021 16:00:00 GMT</pubDate>
            <description><![CDATA[How Mi cc9e Flash into custom Android]]></description>
            <content:encoded><![CDATA[<blockquote><p>Two ROMs are provided, both of which need to unlock BL and flash in <a href="https://mifirm.net/downloadtwrp/151">TWRP</a>, And <a href="https://sourceforge.net/projects/xiaomi-eu-multilang-miui-roms/files/xiaomi.eu/MIUI-WEEKLY-RELEASES/20.6.11/xiaomi.eu_multi_MICC9e_20.6.11_v12-10.zip/download">EU ROM</a></p></blockquote><h1 id="rom1"><a aria-hidden="true" tabindex="-1" href="#rom1"><span class="icon icon-link"></span></a>Rom#1</h1><blockquote><p>This is A3 ROM, but it works fine</p></blockquote><ol><li>Dowdload <a href="https://crdroid.net/laurel_sprout">Crdorid ROM</a></li><li>Download <a href="https://androidfilehost.com/?fid=818070582850510260">exe</a></li><li>Unzip payload_dumper.zip. Include payload_imput,payload_output and payload.exe</li><li>Extrqct Crdroid_rom.zip, copy payload.bin to payload_input</li><li>Run payload_dumper.exe, wait it colsed,then get psystem.img from payload_output</li><li>Erase <code>data</code> and <code>cache</code>, flash system.img</li><li><code>Please don't reboot</code>, flash <a href="https://github.com/topjohnwu/Magisk/releases/download/v20.4/Magisk-v20.4.zip">magisk 20.x</a></li><li>Enjoy it~</li></ol><h1 id="rom2"><a aria-hidden="true" tabindex="-1" href="#rom2"><span class="icon icon-link"></span></a>Rom#2</h1><blockquote><p>This is a Android 10 GSI</p></blockquote><ol><li><a href="https://github.com/phhusson/treble_experimentations/releases/download/v219/system-quack-arm64-ab-gapps.img.xz">Download</a></li><li>Enjoy it~</li></ol><img src="https://upload.wikimedia.org/wikipedia/commons/thumb/6/64/Android_logo_2019_%28stacked%29.svg/150px-Android_logo_2019_%28stacked%29.svg.png"/>]]></content:encoded>
        </item>
    </channel>
</rss>